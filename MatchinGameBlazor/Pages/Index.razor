@page "/"
@using System.Timers

<style>
    .container{
        width:400px;
    }

    button{
        width:100px;
        height:100px;
        font-size:50px;
    }

    #sbutton{
        width:400px;
        height:50px;
    }
</style>

<div class="container">
    <div class="row">
        @for(var index = 0; index < shuffeldList.Count; index++)
        {
            var listItem = shuffeldList[index];
            var uniqueDescription = $"Button #{index}";
            <div class="col-3">
                <button @onclick="@(() => ButtonClick(listItem, uniqueDescription))" type="button" class="btn btn-outline-dark">
                    <h1>@listItem</h1>
                </button>
            </div>
        }
    </div>

    <div class="col-3">
        <button class="btn btn-outline-dark" id="sbutton" type="button" @onclick="@(() => StartGame())"><h3>Start</h3></button>
    </div>

    <div class="row">
        <h2>Matches found: @matchesFound</h2>
    </div>

    <div class="row">
        <h2>Time left: @timeDisplay</h2>
    </div>
</div>

@code{
    List<string> animalEmoji = new List<string>()
        {
            "🐨","🐨",
            "🐍","🐍",
            "🦑","🦑",
            "🦢","🦢",
            "🦜","🦜",
            "🐦","🐦",
            "🐧","🐧",
            "🐛","🐛"
        };

    List<string> foodEmoji = new List<string>()
        {
            "🍕","🍕",
            "🍔","🍔",
            "🍟","🍟",
            "🌭","🌭",
            "🍿","🍿",
            "🥓","🥓",
            "🥩","🥩",
            "🍖","🍖"
        };

    List<string> fruitEmoji = new List<string>()
        {
            "🥝","🥝",
            "🍌","🍌",
            "🍋","🍋",
            "🍊","🍊",
            "🍉","🍉",
            "🍏","🍏",
            "🍓","🍓",
            "🍇","🍇"
        };

    List<string> shuffeldList = new List<string>();
    int matchesFound = 0;
    Timer timer;
    int tenthsOfSecoundsElapsed = 0;
    string timeDisplay;

    protected override void OnInitialized()
    {
        timer = new Timer(100);
        timer.Elapsed += Timer_Tick;

        SetUpGame();
    }

    private void SetUpGame()
    {
        Random random = new Random();
        shuffeldList = chooseList().OrderBy(item => random.Next()).ToList();
        matchesFound = 0;
        tenthsOfSecoundsElapsed = 200;
    }

    string lastItemFound = string.Empty;
    string lastDescription = string.Empty;

    private void StartGame()
    {
        timer.Start();
    }
    
    private void ButtonClick(string listItem, string listDescription)
    {
        if (lastItemFound == string.Empty)
        {
            lastItemFound = listItem;
            lastDescription = listDescription;

            //timer.Start();
        }else if((lastItemFound == listItem) && (listDescription != lastDescription))
        {
            lastItemFound = string.Empty;
            shuffeldList = shuffeldList.Select(a => a.Replace(listItem, string.Empty)).ToList();

            matchesFound++;
            if(matchesFound == 8)
            {
                timer.Stop();
                timeDisplay += " - Play Again?";
                
                SetUpGame();
            }
        }
        else
        {
            lastItemFound = string.Empty;
        }
    }

    private void Timer_Tick(Object source, ElapsedEventArgs e)
    {
        InvokeAsync(() =>
        {
            if (tenthsOfSecoundsElapsed > 0)
            {
                tenthsOfSecoundsElapsed--;
                timeDisplay = (tenthsOfSecoundsElapsed / 10f).ToString("0.0s");
            }
            else
            {
                timer.Stop();
                timeDisplay = " - Play Again?";
                SetUpGame();
            }
            StateHasChanged();
        });
    } 

    private List<string> chooseList()
    {
        Random random = new Random();
        var list = new List<string>();

        switch (random.Next(3))
        {
            case 0:
                list = animalEmoji;
                break;
            case 1:
                list = foodEmoji;
                break;
            case 2:
                list = fruitEmoji;
                break;
        }
        return list;
    }
}
